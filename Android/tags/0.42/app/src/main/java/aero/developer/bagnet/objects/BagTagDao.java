package aero.developer.bagnet.objects;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import aero.developer.bagnet.objects.BagTag;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BagTag".
*/
public class BagTagDao extends AbstractDao<BagTag, Long> {

    public static final String TABLENAME = "BagTag";

    /**
     * Properties of entity BagTag.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Datetime = new Property(1, String.class, "datetime", false, "DATETIME");
        public final static Property Trackingpoint = new Property(2, String.class, "trackingpoint", false, "TRACKINGPOINT");
        public final static Property Containerid = new Property(3, String.class, "containerid", false, "CONTAINERID");
        public final static Property Bagtag = new Property(4, String.class, "bagtag", false, "BAGTAG");
        public final static Property Flightnum = new Property(5, String.class, "flightnum", false, "FLIGHTNUM");
        public final static Property Flighttype = new Property(6, String.class, "flighttype", false, "FLIGHTTYPE");
        public final static Property Flightdate = new Property(7, String.class, "flightdate", false, "FLIGHTDATE");
        public final static Property Synced = new Property(8, Boolean.class, "synced", false, "SYNCED");
        public final static Property Locked = new Property(9, Boolean.class, "locked", false, "LOCKED");
        public final static Property ErrorMsg = new Property(10, String.class, "errorMsg", false, "ERROR_MSG");
        public final static Property Pnr = new Property(11, String.class, "pnr", false, "PNR");
        public final static Property Passenger_last_name = new Property(12, String.class, "passenger_last_name", false, "PASSENGER_LAST_NAME");
        public final static Property Passenger_first_name = new Property(13, String.class, "passenger_first_name", false, "PASSENGER_FIRST_NAME");
        public final static Property Inbound_airline_code = new Property(14, String.class, "inbound_airline_code", false, "INBOUND_AIRLINE_CODE");
        public final static Property Inbound_flight_date = new Property(15, String.class, "inbound_flight_date", false, "INBOUND_FLIGHT_DATE");
        public final static Property Origin_airport = new Property(16, String.class, "origin_airport", false, "ORIGIN_AIRPORT");
        public final static Property Outbound_airline_code = new Property(17, String.class, "outbound_airline_code", false, "OUTBOUND_AIRLINE_CODE");
        public final static Property Outbound_flight_date = new Property(18, String.class, "outbound_flight_date", false, "OUTBOUND_FLIGHT_DATE");
        public final static Property Destination_airport = new Property(19, String.class, "destination_airport", false, "DESTINATION_AIRPORT");
        public final static Property Inbound_flight_num = new Property(20, String.class, "inbound_flight_num", false, "INBOUND_FLIGHT_NUM");
        public final static Property Outbound_flight_num = new Property(21, String.class, "outbound_flight_num", false, "OUTBOUND_FLIGHT_NUM");
    };


    public BagTagDao(DaoConfig config) {
        super(config);
    }
    
    public BagTagDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BagTag\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATETIME\" TEXT," + // 1: datetime
                "\"TRACKINGPOINT\" TEXT," + // 2: trackingpoint
                "\"CONTAINERID\" TEXT," + // 3: containerid
                "\"BAGTAG\" TEXT," + // 4: bagtag
                "\"FLIGHTNUM\" TEXT," + // 5: flightnum
                "\"FLIGHTTYPE\" TEXT," + // 6: flighttype
                "\"FLIGHTDATE\" TEXT," + // 7: flightdate
                "\"SYNCED\" INTEGER," + // 8: synced
                "\"LOCKED\" INTEGER," + // 9: locked
                "\"ERROR_MSG\" TEXT," + // 10: errorMsg
                "\"PNR\" TEXT," + // 11: pnr
                "\"PASSENGER_LAST_NAME\" TEXT," + // 12: passenger_last_name
                "\"PASSENGER_FIRST_NAME\" TEXT," + // 13: passenger_first_name
                "\"INBOUND_AIRLINE_CODE\" TEXT," + // 14: inbound_airline_code
                "\"INBOUND_FLIGHT_DATE\" TEXT," + // 15: inbound_flight_date
                "\"ORIGIN_AIRPORT\" TEXT," + // 16: origin_airport
                "\"OUTBOUND_AIRLINE_CODE\" TEXT," + // 17: outbound_airline_code
                "\"OUTBOUND_FLIGHT_DATE\" TEXT," + // 18: outbound_flight_date
                "\"DESTINATION_AIRPORT\" TEXT," + // 19: destination_airport
                "\"INBOUND_FLIGHT_NUM\" TEXT," + // 20: inbound_flight_num
                "\"OUTBOUND_FLIGHT_NUM\" TEXT);"); // 21: outbound_flight_num
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_BagTag_TRACKINGPOINT_BAGTAG_CONTAINERID ON BagTag" +
                " (\"TRACKINGPOINT\",\"BAGTAG\",\"CONTAINERID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BagTag\"";
        db.execSQL(sql);
    }


    @Override
    protected void bindValues(SQLiteStatement stmt, BagTag entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String datetime = entity.getDatetime();
        if (datetime != null) {
            stmt.bindString(2, datetime);
        }
 
        String trackingpoint = entity.getTrackingpoint();
        if (trackingpoint != null) {
            stmt.bindString(3, trackingpoint);
        }
 
        String containerid = entity.getContainerid();
        if (containerid != null) {
            stmt.bindString(4, containerid);
        }
 
        String bagtag = entity.getBagtag();
        if (bagtag != null) {
            stmt.bindString(5, bagtag);
        }
 
        String flightnum = entity.getFlightnum();
        if (flightnum != null) {
            stmt.bindString(6, flightnum);
        }
 
        String flighttype = entity.getFlighttype();
        if (flighttype != null) {
            stmt.bindString(7, flighttype);
        }
 
        String flightdate = entity.getFlightdate();
        if (flightdate != null) {
            stmt.bindString(8, flightdate);
        }

        Boolean synced = entity.getSynced();
        if (synced != null) {
            stmt.bindLong(9, synced ? 1L: 0L);
        }

        Boolean locked = entity.getLocked();
        if (locked != null) {
            stmt.bindLong(10, locked ? 1L: 0L);
        }
 
        String errorMsg = entity.getErrorMsg();
        if (errorMsg != null) {
            stmt.bindString(11, errorMsg);
        }
 
        String pnr = entity.getPnr();
        if (pnr != null) {
            stmt.bindString(12, pnr);
        }
 
        String passenger_last_name = entity.getPassenger_last_name();
        if (passenger_last_name != null) {
            stmt.bindString(13, passenger_last_name);
        }
 
        String passenger_first_name = entity.getPassenger_first_name();
        if (passenger_first_name != null) {
            stmt.bindString(14, passenger_first_name);
        }
 
        String inbound_airline_code = entity.getInbound_airline_code();
        if (inbound_airline_code != null) {
            stmt.bindString(15, inbound_airline_code);
        }
 
        String inbound_flight_date = entity.getInbound_flight_date();
        if (inbound_flight_date != null) {
            stmt.bindString(16, inbound_flight_date);
        }
 
        String origin_airport = entity.getOrigin_airport();
        if (origin_airport != null) {
            stmt.bindString(17, origin_airport);
        }
 
        String outbound_airline_code = entity.getOutbound_airline_code();
        if (outbound_airline_code != null) {
            stmt.bindString(18, outbound_airline_code);
        }
 
        String outbound_flight_date = entity.getOutbound_flight_date();
        if (outbound_flight_date != null) {
            stmt.bindString(19, outbound_flight_date);
        }
 
        String destination_airport = entity.getDestination_airport();
        if (destination_airport != null) {
            stmt.bindString(20, destination_airport);
        }
 
        String inbound_flight_num = entity.getInbound_flight_num();
        if (inbound_flight_num != null) {
            stmt.bindString(21, inbound_flight_num);
        }
 
        String outbound_flight_num = entity.getOutbound_flight_num();
        if (outbound_flight_num != null) {
            stmt.bindString(22, outbound_flight_num);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BagTag readEntity(Cursor cursor, int offset) {
        BagTag entity = new BagTag( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // datetime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // trackingpoint
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // containerid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bagtag
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // flightnum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // flighttype
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // flightdate
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // synced
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // locked
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // errorMsg
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // pnr
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // passenger_last_name
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // passenger_first_name
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // inbound_airline_code
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // inbound_flight_date
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // origin_airport
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // outbound_airline_code
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // outbound_flight_date
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // destination_airport
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // inbound_flight_num
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // outbound_flight_num
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BagTag entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDatetime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTrackingpoint(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContainerid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBagtag(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFlightnum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFlighttype(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFlightdate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSynced(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setLocked(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setErrorMsg(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPnr(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPassenger_last_name(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPassenger_first_name(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setInbound_airline_code(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setInbound_flight_date(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setOrigin_airport(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setOutbound_airline_code(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setOutbound_flight_date(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setDestination_airport(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setInbound_flight_num(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setOutbound_flight_num(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected Long updateKeyAfterInsert(BagTag entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BagTag entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
